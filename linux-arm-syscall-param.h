long restart_syscall(void); 
long exit(int error_code); 
int fork(struct pt_regs regs); 
ssize_t read(unsigned int fd, char * buf, size_t count); 
ssize_t write(unsigned int fd, const char * buf, size_t count); 
long open(const char * filename, int flags, int mode); 
long close(unsigned int fd); 
long waitpid(pid_t pid, int * stat_addr, int options); 
long creat(const char * pathname, int mode); 
long link(const char * oldname, const char * newname); 
long unlink(const char * pathname); 
int execve(struct pt_regs regs); 
long chdir(const char * filename); 
long time(time_t * tloc); 
long mknod(const char * filename, int mode, unsigned dev); 
long chmod(const char * filename, mode_t mode); 
long lchown(const char * filename, uid_t user, gid_t group); 
long stat(char * filename, struct stat * statbuf); 
off_t lseek(unsigned int fd, off_t offset, unsigned int origin); 
long getpid(void); 
long mount(char * dev_name, char * dir_name, char * type, unsigned long flags, void * data); 
long umount(char * name); 
long setuid(uid_t uid); 
long getuid(void); 
long stime(time_t * tptr); 
int ptrace(long request, long pid, long addr, long data); 
unsigned long alarm(unsigned int seconds); 
long fstat(unsigned int fd, struct stat * statbuf); 
long pause(void); 
long utime(char * filename, struct utimbuf * times); 
long access(const char * filename, int mode); 
long nice(int increment); 
long sync(void); 
long kill(int pid, int sig); 
long rename(const char * oldname, const char * newname); 
long mkdir(const char * pathname, int mode); 
long rmdir(const char * pathname); 
long dup(unsigned int fildes); 
int pipe(unsigned long * fildes); 
long times(struct tms * tbuf); 
unsigned long brk(unsigned long brk); 
long setgid(gid_t gid); 
long getgid(void); 
unsigned long signal(int sig, __sighandler_t handler); 
long geteuid(void); 
long getegid(void); 
long acct(const char * name); 
long umount2(char * name, int flags); 
long ioctl(unsigned int fd, unsigned int cmd, unsigned long arg); 
long fcntl(unsigned int fd, unsigned int cmd, unsigned long arg); 
long setpgid(pid_t pid, pid_t pgid); 
long umask(int mask); 
long chroot(const char * filename); 
long ustat(unsigned dev, struct ustat * ubuf); 
long dup2(unsigned int oldfd, unsigned int newfd); 
long getppid(void); 
long getpgrp(void); 
long setsid(void); 
int sigaction(int sig, const struct sigaction * act, struct sigaction * oact); 
long sgetmask(void); 
long ssetmask(int newmask); 
long setreuid(uid_t ruid, uid_t euid); 
long setregid(gid_t rgid, gid_t egid); 
int sigsuspend(int history0, int history1, sigset_t mask); 
long sigpending(sigset_t * set); 
long sethostname(char * name, int len); 
long setrlimit(unsigned int resource, struct rlimit * rlim); 
long getrlimit(unsigned int resource, struct rlimit * rlim); 
long getrusage(int who, struct rusage * ru); 
long gettimeofday(struct timeval * tv, struct timezone * tz); 
long settimeofday(struct timeval * tv, struct timezone * tz); 
long getgroups(int gidsetsize, gid_t * grouplist); 
long setgroups(int gidsetsize, gid_t * grouplist); 
int select(struct sel_arg_struct * arg); 
long symlink(const char * oldname, const char * newname); 
long lstat(char * filename, struct stat * statbuf); 
long readlink(const char * path, char * buf, int bufsiz); 
long uselib(const char * library); 
long swapon(const char * specialfile, int swap_flags); 
long reboot(int magic1, int magic2, unsigned int cmd, void * arg); 
long readdir(unsigned int fd, struct linux_dirent * dirent, unsigned int count); 
int mmap(struct mmap_arg_struct * arg); 
long munmap(unsigned long addr, size_t len); 
long truncate(const char * path, unsigned long length); 
long ftruncate(unsigned int fd, unsigned long length); 
long fchmod(unsigned int fd, mode_t mode); 
long fchown(unsigned int fd, uid_t user, gid_t group); 
long getpriority(int which, int who); 
long setpriority(int which, int who, int niceval); 
long statfs(const char * path, struct statfs * buf); 
long fstatfs(unsigned int fd, struct statfs * buf); 
long ioperm(unsigned long from, unsigned long num, int turn_on); 
long socketcall(int call, unsigned long * args); 
long syslog(int type, char * buf, int len); 
long setitimer(int which, struct itimerval * value, struct itimerval * ovalue); 
long getitimer(int which, struct itimerval * value); 
int uname(struct utsname * name); 
long iopl(unsigned long unused); 
long vhangup(void); 
int vm86old(struct pt_regs regs); 
long wait4(pid_t pid, int * stat_addr, int options, struct rusage * ru); 
long swapoff(const char * specialfile); 
long sysinfo(struct sysinfo * info); 
int ipc(int call, int first, int second, int third, void * ptr, long fifth); 
long fsync(unsigned int fd); 
int sigreturn(unsigned long __unused); 
int clone(struct pt_regs regs); 
long setdomainname(char * name, int len); 
int modify_ldt(int func, void * ptr, unsigned long bytecount); 
long adjtimex(struct timex * txc_p); 
long mprotect(unsigned long start, size_t len, unsigned long prot); 
long sigprocmask(int how, sigset_t * set, sigset_t * oset); 
long init_module(void * umod, unsigned long len, const char * uargs); 
long delete_module(const char * name_user, unsigned int flags); 
long quotactl(unsigned int cmd, const char * special, qid_t id, void * addr); 
long getpgid(pid_t pid); 
long fchdir(unsigned int fd); 
long bdflush(int func, long data); 
long sysfs(int option, unsigned long arg1, unsigned long arg2); 
long personality(unsigned long personality); 
long setfsuid(uid_t uid); 
long setfsgid(gid_t gid); 
long llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t * result, unsigned int origin); 
long getdents(unsigned int fd, struct linux_dirent * dirent, unsigned int count); 
long select(int n, fd_set * inp, fd_set * outp, fd_set * exp, struct timeval * tvp); 
long flock(unsigned int fd, unsigned int cmd); 
long msync(unsigned long start, size_t len, int flags); 
ssize_t readv(unsigned long fd, const struct iovec * vec, unsigned long vlen); 
ssize_t writev(unsigned long fd, const struct iovec * vec, unsigned long vlen); 
long getsid(pid_t pid); 
long fdatasync(unsigned int fd); 
long sysctl(struct __sysctl_args * args); 
long mlock(unsigned long start, size_t len); 
long munlock(unsigned long start, size_t len); 
long mlockall(int flags); 
long munlockall(void); 
long sched_setparam(pid_t pid, struct sched_param * param); 
long sched_getparam(pid_t pid, struct sched_param * param); 
long sched_setscheduler(pid_t pid, int policy, struct sched_param * param); 
long sched_getscheduler(pid_t pid); 
long sched_yield(void); 
long sched_get_priority_max(int policy); 
long sched_get_priority_min(int policy); 
long sched_rr_get_interval(pid_t pid, struct timespec * interval); 
long nanosleep(struct timespec * rqtp, struct timespec * rmtp); 
unsigned long mremap(unsigned long addr, unsigned long len, unsigned long new_len, unsigned long flags, unsigned long new_addr); 
long setresuid(uid_t ruid, uid_t euid, uid_t suid); 
long getresuid(uid_t * ruid, uid_t * euid, uid_t * suid); 
int vm86(struct pt_regs regs); 
long poll(struct pollfd * ufds, unsigned int nfds, long timeout); 
long setresgid(gid_t rgid, gid_t egid, gid_t sgid); 
long getresgid(gid_t * rgid, gid_t * egid, gid_t * sgid); 
long prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5); 
int rt_sigreturn(unsigned long __unused); 
long rt_sigaction(int sig, const struct sigaction * act, struct sigaction * oact, size_t sigsetsize); 
long rt_sigprocmask(int how, sigset_t * set, sigset_t * oset, size_t sigsetsize); 
long rt_sigpending(sigset_t * set, size_t sigsetsize); 
long rt_sigtimedwait(const sigset_t * uthese, siginfo_t * uinfo, const struct timespec * uts, size_t sigsetsize); 
long rt_sigqueueinfo(int pid, int sig, siginfo_t * uinfo); 
int rt_sigsuspend(struct pt_regs regs); 
ssize_t pread64(unsigned int fd, char * buf, size_t count, loff_t pos); 
ssize_t pwrite64(unsigned int fd, const char * buf, size_t count, loff_t pos); 
long chown(const char * filename, uid_t user, gid_t group); 
long getcwd(char * buf, unsigned long size); 
long capget(cap_user_header_t header, cap_user_data_t dataptr); 
long capset(cap_user_header_t header, const cap_user_data_t data); 
int sigaltstack(unsigned long ebx); 
ssize_t sendfile(int out_fd, int in_fd, off_t * offset, size_t count); 
int vfork(struct pt_regs regs); 
long ugetrlimit(unsigned int resource, struct rlimit * rlim); 
long mmap2(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff); 
long truncate64(const char * path, loff_t length); 
long ftruncate64(unsigned int fd, loff_t length); 
long stat64(char * filename, struct stat64 * statbuf); 
long lstat64(char * filename, struct stat64 * statbuf); 
long fstat64(unsigned long fd, struct stat64 * statbuf); 
long lchown32(const char * filename, uid_t user, gid_t group); 
long getuid32(void); 
long getgid32(void); 
long geteuid32(void); 
long getegid32(void); 
long setreuid32(uid_t ruid, uid_t euid); 
long setregid32(gid_t rgid, gid_t egid); 
long getgroups32(int gidsetsize, gid_t * grouplist); 
long setgroups32(int gidsetsize, gid_t * grouplist); 
long fchown32(unsigned int fd, uid_t user, gid_t group); 
long setresuid32(uid_t ruid, uid_t euid, uid_t suid); 
long getresuid32(uid_t * ruid, uid_t * euid, uid_t * suid); 
long setresgid32(gid_t rgid, gid_t egid, gid_t sgid); 
long getresgid32(gid_t * rgid, gid_t * egid, gid_t * sgid); 
long chown32(const char * filename, uid_t user, gid_t group); 
long setuid32(uid_t uid); 
long setgid32(gid_t gid); 
long setfsuid32(uid_t uid); 
long setfsgid32(gid_t gid); 
long pivot_root(const char * new_root, const char * put_old); 
long mincore(unsigned long start, size_t len, unsigned char * vec); 
long madvise(unsigned long start, size_t len_in, int behavior); 
long getdents64(unsigned int fd, struct linux_dirent64 * dirent, unsigned int count); 
long fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg); 
long gettid(void); 
ssize_t readahead(int fd, loff_t offset, size_t count); 
long setxattr(char * path, char * name, void * value, size_t size, int flags); 
long lsetxattr(char * path, char * name, void * value, size_t size, int flags); 
long fsetxattr(int fd, char * name, void * value, size_t size, int flags); 
ssize_t getxattr(char * path, char * name, void * value, size_t size); 
ssize_t lgetxattr(char * path, char * name, void * value, size_t size); 
ssize_t fgetxattr(int fd, char * name, void * value, size_t size); 
ssize_t listxattr(char * path, char * list, size_t size); 
ssize_t llistxattr(char * path, char * list, size_t size); 
ssize_t flistxattr(int fd, char * list, size_t size); 
long removexattr(char * path, char * name); 
long lremovexattr(char * path, char * name); 
long fremovexattr(int fd, char * name); 
long tkill(int pid, int sig); 
ssize_t sendfile64(int out_fd, int in_fd, loff_t * offset, size_t count); 
long futex(int * uaddr, int op, int val, struct timespec * utime, int * uaddr2, int val3); 
long sched_setaffinity(pid_t pid, unsigned int len, unsigned long * user_mask_ptr); 
long sched_getaffinity(pid_t pid, unsigned int len, unsigned long * user_mask_ptr); 
int set_thread_area(struct user_desc * u_info); 
int get_thread_area(struct user_desc * u_info); 
long io_setup(unsigned int nr_events, aio_context_t * ctxp); 
long io_destroy(aio_context_t ctx); 
long io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event * events, struct timespec * timeout); 
long io_submit(aio_context_t ctx_id, long nr, struct iocb * * iocbpp); 
long io_cancel(aio_context_t ctx_id, struct iocb * iocb, struct io_event * result); 
long fadvise64(int fd, loff_t offset, size_t len, int advice); 
void exit_group(int error_code); 
long lookup_dcookie(unsigned long long cookie64, char * buf, size_t len); 
long epoll_create(int size); 
long epoll_ctl(int epfd, int op, int fd, struct epoll_event * event); 
long epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout); 
long remap_file_pages(unsigned long start, unsigned long size, unsigned long __prot, unsigned long pgoff, unsigned long flags); 
long set_tid_address(int * tidptr); 
long timer_create(clockid_t which_clock, struct sigevent * timer_event_spec, timer_t * created_timer_id); 
long timer_settime(timer_t timer_id, int flags, const struct itimerspec * new_setting, struct itimerspec * setting); 
long timer_gettime(timer_t timer_id, struct itimerspec * setting); 
long timer_getoverrun(timer_t timer_id); 
long timer_delete(timer_t timer_id); 
long clock_settime(clockid_t which_clock, const struct timespec * tp); 
long clock_gettime(clockid_t which_clock, struct timespec * tp); 
long clock_getres(clockid_t which_clock, struct timespec * tp); 
long clock_nanosleep(clockid_t which_clock, int flags, const struct timespec * rqtp, struct timespec * rmtp); 
long statfs64(const char * path, size_t sz, struct statfs64 * buf); 
long fstatfs64(unsigned int fd, size_t sz, struct statfs64 * buf); 
long tgkill(int tgid, int pid, int sig); 
long utimes(char * filename, struct timeval * utimes); 
long fadvise64_64(int fd, loff_t offset, loff_t len, int advice); 
long mbind(unsigned long start, unsigned long len, unsigned long mode, unsigned long * nmask, unsigned long maxnode, unsigned flags); 
long get_mempolicy(int * policy, unsigned long * nmask, unsigned long maxnode, unsigned long addr, unsigned long flags); 
long set_mempolicy(int mode, unsigned long * nmask, unsigned long maxnode); 
long mq_open(const char * u_name, int oflag, mode_t mode, struct mq_attr * u_attr); 
long mq_unlink(const char * u_name); 
long mq_timedsend(mqd_t mqdes, const char * u_msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec * u_abs_timeout); 
ssize_t mq_timedreceive(mqd_t mqdes, char * u_msg_ptr, size_t msg_len, unsigned int * u_msg_prio, const struct timespec * u_abs_timeout); 
long mq_notify(mqd_t mqdes, const struct sigevent * u_notification); 
long mq_getsetattr(mqd_t mqdes, const struct mq_attr * u_mqstat, struct mq_attr * u_omqstat); 
long waitid(int which, pid_t pid, struct siginfo * infop, int options, struct rusage * ru); 
long add_key(const char * _type, const char * _description, const void * _payload, size_t plen, key_serial_t ringid); 
long request_key(const char * _type, const char * _description, const char * _callout_info, key_serial_t destringid); 
long keyctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5); 
